What happens when you initialize a repository? Why do you need to do it?

It creates a .git file (which you can see if you do $ ls -a )

If you don't do it it is merely a directory. once you've created the .git file the repository is ready to be logged. 

git init turns a directory into a repository by adding hidden files (or rather adds repository functionality  into the directory because it also continues to be a directory)

How is the staging area different from the working directory and the repository? What value do you think it offers?

You don't work in the staging area but you do put files there before you commit them so you can have a good look and decide whether or not they are right. Also, putting them together in the staging area makes them associated with eachother so when you commit them you'll commit all the ones in the staginag area. Does it make a permanent association? Will this happen every time I commit? 

How can you use the staging area to make sure you have one commit per logical change?

Yes. Why yes, you can. 

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

When I want to make a significant change that I might not want to keep. I won't get all in a muddle. 


How do the diagrams help you visualize the branch structure?

Because it is visual 
